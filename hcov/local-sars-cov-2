#!/usr/bin/env bash

SAMPLE=$1

ORGANISM=sars-cov-2
ASSEMBLY=GCA_009858895.3_ASM985889v3_genomic
REFNAME=MN908947.3

# download the reference data
if [[ ! -d ${PIPELINE_ROOT}/reference/sars-cov-2/nextclade-data ]]; then
    nextclade dataset get --name='sars-cov-2' --output-dir=${PIPELINE_ROOT}/reference/sars-cov-2/nextclade-data
fi

if [[ -n ${WORKING}/${SAMPLE}.tgz ]]; then
    echo Starting ${SAMPLE} run

    # give us a place to work
    mkdir -p ${WORKING}/${SAMPLE}

    # build the pipeline
    python ./hcov-runner.py \
        --cores 8 \
        --sample ${SAMPLE} \
        --work-dir ${PIPELINE_ROOT} \
        --reference-dir ${PIPELINE_ROOT}/reference/${ORGANISM} \
        --reference-assembly ${ASSEMBLY} \
        --reference-name ${REFNAME} \
        --pipeline-dir ${WORKING}/${SAMPLE} \
        --stats-dir ${WORKING}/${SAMPLE} \
        --script ${WORKING}/${SAMPLE}/${SAMPLE}_runner \
        --temp-dir ${HOME}/tmp \
        --fastq-dir /Volumes/Genomics/zymo/fastq \
        --read-limit 100000 \
        --caller bcftools \
        --aligner bwa \
        --preprocessor fastp \
        --sorter biobambam \
        --unmapped

    cp ../assets/software_versions_mqc.html ${WORKING}/${SAMPLE}
    cp ../assets/ovationlogo.png ${WORKING}/${SAMPLE}

    # run the pipeline
    bash ${WORKING}/${SAMPLE}/${SAMPLE}_runner >${WORKING}/${SAMPLE}/${SAMPLE}.log 2>&1

    echo Run ${SAMPLE} completed, packaging

    # pack up the stuff and clean house
    # rm -f ${WORKING}/${SAMPLE}/${SAMPLE}_R1.trimmed.fastq.gz
    # rm -f ${WORKING}/${SAMPLE}/${SAMPLE}_R2.trimmed.fastq.gz

    cd ${WORKING}/
    tar cfz ${WORKING}/${SAMPLE}.tgz ./${SAMPLE}
    # rm -rf ${WORKING}/${SAMPLE}

    echo Finished ${SAMPLE} run
else
    echo "We have already processed sample ${SAMPLE}"
fi
