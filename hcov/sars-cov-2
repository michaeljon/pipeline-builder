#!/usr/bin/env bash

SAMPLE=$1
ORGANISM=sars-cov-2
ASSEMBLY=GCA_009858895.3_ASM985889v3_genomic
REFNAME=MN908947.3

# download the reference data
if [[ ! -d ${HOME}/reference/sars-cov-2/nextclade-data ]]; then
    nextclade dataset get --name='sars-cov-2' --output-dir=${HOME}/reference/sars-cov-2/nextclade-data
fi

if [[ -n ${HOME}/pipeline/${SAMPLE}.tgz ]]; then
    echo Starting ${SAMPLE} run

    # give us a place to work
    mkdir -p ${HOME}/pipeline/${SAMPLE}

    # build the pipeline
    python ${HOME}/pipeline-builder/hcov/hcov-runner.py \
        --cores 8 \
        --no-color \
        --sample ${SAMPLE} \
        --work-dir ${HOME} \
        --reference-dir ${HOME}/reference/${ORGANISM} \
        --reference-assembly ${ASSEMBLY} \
        --reference-name ${REFNAME} \
        --pipeline-dir ${HOME}/pipeline/${SAMPLE} \
        --stats-dir ${HOME}/pipeline/${SAMPLE} \
        --script ${HOME}/pipeline/${SAMPLE}/${SAMPLE}_runner \
        --temp-dir ${HOME}/stats/temp \
        --fastq-dir ${HOME}/pipeline/fastq \
        --preprocessor fastp \
        --aligner bwa \
        --sorter biobambam \
        --caller bcftools \
        --unmapped

    cp ${HOME}/pipeline-builder/assets/software_versions_mqc.html ${HOME}/pipeline/${SAMPLE}
    cp ${HOME}/pipeline-builder/assets/ovationlogo.png ${HOME}/pipeline/${SAMPLE}

    # run the pipeline
    bash ${HOME}/pipeline/${SAMPLE}/${SAMPLE}_runner >${HOME}/pipeline/${SAMPLE}/${SAMPLE}.log 2>&1

    echo Run ${SAMPLE} completed, packaging

    # pack up the stuff and clean house
    # rm -f ${HOME}/pipeline/${SAMPLE}/${SAMPLE}_R1.trimmed.fastq.gz
    # rm -f ${HOME}/pipeline/${SAMPLE}/${SAMPLE}_R2.trimmed.fastq.gz

    cd ${HOME}/pipeline/
    tar cfz ${HOME}/pipeline/${SAMPLE}.tgz ./${SAMPLE}
    # rm -rf ${HOME}/pipeline/${SAMPLE}

    echo Finished ${SAMPLE} run
else
    echo "We have already processed sample ${SAMPLE}"
fi
